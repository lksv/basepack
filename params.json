{"name":"Basepack","tagline":"","body":"Basepack\r\n=======\r\n[![Build Status](https://api.travis-ci.org/lksv/basepack.png?branch=master)](http://travis-ci.org/lksv/base_pack)\r\n[![Dependency Status](https://gemnasium.com/lksv/basepack.png)](https://gemnasium.com/lksv/basepack)\r\n\r\n**Basepack** is a Ruby on Rails framework for quick creation of information\r\nsystems.\r\n\r\n## Features\r\n\r\n* Quick development of forms - generates forms for resource by short DSL metadata\r\n  settings.\r\n* Rich set of business types support (datetime, wysiwig, tags, phone number, ...)\r\n* Search and filtering, saved filters\r\n* Automatic form validation\r\n* Import and Export functionality for resource\r\n* Easy way to create custom actions\r\n* Authentication (via [Devise](ttps://github.com/plataformatec/devise))\r\n* Authorization (via [Cancan](https://github.com/ryanb/cancan.git))\r\n\r\n## Documentation\r\n\r\n[Turorial](https://github.com/lksv/basepack/wiki/Tutorial)\r\n\r\nSee project [wiki](https://github.com/lksv/basepack/wiki).\r\n\r\n## Demo\r\n\r\n*currently we are preparing \r\n[basepace_example application](https://github.com/zorec/basepack_example)*\r\n\r\nThe running application will be available at [http://basepack-example.herokuapp.com/](http://basepack-example.herokuapp.com/)\r\n\r\n## Installation\r\n\r\nIn your `Gemfile`, add the following dependencies:\r\n\r\n    gem \"basepack\",      git: \"https://github.com/lksv/basepack.git\"\r\n\r\nRun:\r\n\r\n    bundle install\r\n\r\nAnd then run:\r\n\r\n    rails g basepack:install\r\n\r\nThis generator will install **Basepack**, \r\n[Devise](https://github.com/plataformatec/devise) and\r\n[CanCan](https://github.com/ryanb/cancan.git) and following gems\r\n* inherited\\_resources\r\n* ransack\r\n* kaminari\r\n* simple\\_form\r\n* settingslogic\r\n* twitter-bootstrap-rails\r\n* bootbox-rails\r\n\r\nif you don't already have them installed.\r\n\r\nDefine inital ability in `app/models/ability.rb`. You can put ```can\r\n:manage, :all``` to enable anybody to perform any\r\naction on any object. See more on [CanCan\r\nwiki](https://github.com/ryanb/cancan/wiki/Defining-Abilities).\r\n\r\nMigrate your database and start the server:\r\n\r\n    rake db:migrate\r\n    rails s\r\n\r\n\r\n## Generator usage\r\n\r\nYou can easily generate new resource (scaffold for the resource) by\r\n```rails g scaffold NAME [field[:type][:index] field[:type][:index]] [options]```.\r\nE.g.\r\n\r\n    rails g scaffold Project name short_description description:text start:date finish:date\r\n    rails g scaffold Task name description:text project:references user:references\r\n\r\nThen \r\n```rake db:migrate```\r\n```rails s```\r\n\r\nNotice that files for views are not generated (directories appp/views/projects and appp/views/tasks are empty), but all RESTful actions are working correctly. It is because views iherit default structure and you can easily override these defaults by creating appropriate files.\r\n\r\n## Basic usage\r\n\r\nAfter scaffolding your resources, you can customize fields used in individual actions by [Railsdmin DSL](https://github.com/sferik/rails_admin/wiki/Railsadmin-DSL)\r\n\r\nFile ```app/models/project.rb```:\r\n```\r\nclass Project < ActiveRecord::Base\r\n  has_many :tasks, inverse_of: :project\r\n  validates :name, :short_description, presence: true\r\n\r\n  rails_admin do\r\n    list do\r\n      field :name\r\n      field :short_description\r\n      field :finish\r\n    end\r\n\r\n    edit do\r\n      field :name\r\n      field :short_description\r\n      field :description, :wysihtml5\r\n      field :start\r\n      field :finish\r\n     end \r\n\r\n     show do\r\n       field :name\r\n       field :description\r\n       field :start\r\n       field :finish\r\n     end \r\n  end \r\nend\r\n```\r\n\r\nFile ```app/models/task.rb```\r\n```\r\nclass Task < ActiveRecord::Base\r\n  belongs_to :project, inverse_of: :tasks\r\n  belongs_to :user\r\nend\r\n```\r\nIMPORTANT! Make sure that you define inverse_of option on has_one, has_many and belongs_to associations. It is necessary for correct functioning of **Basepack**, see [Rails documentation](http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#label-Bi-directional+associations) for explaination.\r\n\r\n\r\nAnother difference is controllers which inherit from ResourcesController. Full inheritance hierarchy looks this way:\r\n```\r\nProjectsController < ResourcesController < Basepack::BaseController < InheritedResources::Base\r\n```\r\n\r\n\r\nIf you are not familiar with [InheritedResources](https://github.com/josevalim/inherited_resources), take a look at it.  \r\n\r\nBasepack::BaseController adds to it:\r\n* strong parameters handling\r\n* ```options``` method\r\n* ```taggings``` method\r\n* ```build_resource``` method\r\n\r\nYou do NOT need to define permitted parameters anymore. It is defined by RailsAdmin DSL, more precisely by what you set as visible in edit action. \r\nSo file ```app/models/project.rb```:\r\n\r\n```\r\nclass Project < ActiveRecord::Base\r\n  ...\r\n    edit do\r\n      field :name\r\n      field :short_description\r\n      field :description, :wysihtml5\r\n      field :start\r\n      field :finish\r\n     end \r\n  ...\r\nend\r\n```\r\n\r\nimplicitly sets permitted params which could be written as:\r\n```\r\ndef permitted_params\r\n  params.permit(:project => [:name, :short_description, :description, :start, :finish])\r\nend\r\n```\r\nin your projects controller. You can override these implicit settings by creating this method in case you want it.\r\n\r\n## Basic Architecture Background\r\n\r\n**Basepack** is build on the top of several gems:\r\n* [Device](https://github.com/plataformatec/devise) for Authentication\r\n* [CanCan](https://github.com/ryanb/cancan.git) for Authorization\r\n* [InheritedResources](https://github.com/josevalim/inherited_resources)\r\n   makes your controllers inherit all restful actions.\r\n* [SimpleForm](https://github.com/plataformatec/simple_form) for\r\n  creating Forms.\r\n* [nested-form](https://github.com/ryanb/nested_form) for handling\r\n  multiple models in a single form\r\n* [bootstrap-sass](https://github.com/thomas-mcdonald/bootstrap-sass)\r\n* ...[and others](basepack.gemspec)\r\n\r\nAlthoug you can use **Basepack** without knowing anything of the\r\nbackground architecture it is recommended to get to know at least with:\r\n[InheritedResources](https://github.com/josevalim/inherited_resources),\r\n[CanCan](https://github.com/ryanb/cancan.git) and\r\n[Device](https://github.com/plataformatec/devise). \r\n\r\n**Basepack** was also\r\ninspired by [RailsAdmin](https://github.com/sferik/rails_admin) and\r\nstill using [RailsAdmin\r\nDSL](https://github.com/sferik/rails_admin/wiki/Railsadmin-DSL) for defining the forms.\r\n\r\nTODO - explain the concept. Class ```Basepack::Form::Base``` and ```Basepack::Form::Fields::Base```.\r\nController action as ```<form_name>_form_for``` and ```form_factory_rails_admin```.\r\n\r\n## Customining Views\r\n\r\n## Customizing Form View\r\n\r\nLicense\r\n=======\r\n\r\nThis project rocks and uses LGPL-LICENSE.\r\n\r\nCredits\r\n=======\r\n\r\n[RailsAdmin](https://github.com/sferik/rails_admin) field forms was\r\noriginaly taken from rails-admin.\r\n\r\n[nested_form_ui](https://github.com/tb/nested_form_ui) - stylesheed and\r\ncode for orderable was inspired by this project.\r\n","google":"UA-46491076-1","note":"Don't delete this file! It's used internally to help with page regeneration."}