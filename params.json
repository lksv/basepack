{"name":"Basepack","tagline":"","body":"## Introduction\r\n\r\nThis tutorial is designed for learning basepack which is based on Ruby on Rails framework. So previous experience with Ruby on Rails is necessary but you do not need to be an expert. There is the [README] (https://github.com/lksv) for shorter introduction and demonstration of basepack.  \r\n\r\nBasepack is a collection of gems (which are useful in any application) tied together with additional features on top of it. \r\nInstalling basepack's gem really enhances the power of Ruby on Rails. And remember you can still use everything what development in Ruby on Rails provides. For example use basepack's features only in parts of application.\r\n\r\nFor easy start it is highly recommended that you are familiar with gems below (you have used them at least in one application) because these gems are essential part of basepack. Although there is no need to worry if you do not know them you will be supplied with additional links to related sections through all tutorial. \r\n* [Devise](ttps://github.com/plataformatec/devise)\r\n* [Cancan](https://github.com/ryanb/cancan.git)\r\n* [Rails_admin](https://github.com/sferik/rails_admin) (especially [rails_admin DSL](https://github.com/sferik/rails_admin/wiki/Railsadmin-DSL))\r\n* [InheritedResources](https://github.com/josevalim/inherited_resources)\r\n* [SimpleForm](https://github.com/plataformatec/simple_form)\r\n* [Nested-form](https://github.com/ryanb/nested_form)\r\n\r\nAnd being familiar with these may also help:\r\n* [Ransack](https://github.com/activerecord-hackery/ransack)\r\n* [Kaminari](https://github.com/amatsuda/kaminari)\r\n* [bootstrap-sass](https://github.com/thomas-mcdonald/bootstrap-sass)\r\n\r\nThe basepack requires rails 4 and ruby 2 or higher, these versions were used in this tutorial.\r\n```console\r\nrails -v\r\nruby -v\r\n```\r\n> Rails 4.0.0  \r\n> ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-linux]\r\n\r\n<!-- \r\nTODO Overview - listing sections \r\nThis tutorial walks you through construction of issue tracking application because best way to learn is by creating. Check out how the [application](TODO finished application) will look like at the end.\r\n\r\nInstallation - you will learn how to install basepack to your application and basics of working with basepack.\r\nNested resource - what it is and how it works and how you can use it\r\nDefault query - what is it and how to set it.\r\nTagged issues with acts_as_taggabale\r\nCancan \r\nCustomize Project's show page\r\nNamespaces\r\n\r\n-->\r\n\r\n## First application with basepack\r\n\r\nIn this tutorial you will create issue tracking application, let's start by creating new rails application.\r\n```console\r\nrails new basepack_tutorial\r\ncd basepack_tutorial\r\n```\r\n\r\nThen add basepack gem to the application and run bundle to install it with all its dependancies.\r\n> Gemfile:\r\n```ruby\r\ngem 'basepack'\r\n```\r\n\r\n```console\r\nbundle install\r\n```\r\n\r\nThis will create a new basepack generator for us let's use it right away.\r\n```console\r\nrails g basepack:install\r\n```\r\n\r\nThe basepack generator notices the absence of cancan and devise files and offers you running generator for them as well.\r\n\r\nThen it asks for confirmation to remove application.html.erb in order to use own application.html.haml with related partials (header, navigation, etc.). You can see how it looks in demo application.\r\n<!-- (TODO - see the screenshots below) -->\r\n\r\n<!-- TODO links to files on github -->\r\n<!-- TODO point to diff commit -->\r\n<!-- TODO seperate generators for cancan, devise and cancan -->\r\nHere is the summary of what generator did:\r\n* Added assets to ```application.js``` manifest file\r\n* Created new stylesheet ```app/assets/stylesheets/basepack_and_overrides.css```\r\n* Created new ability file ```app/models/ability.rb```\r\n* Added permissions for Filter to ability file\r\n* Added gems to ```Gemfile```\r\n* Created [settings file](https://github.com/binarylogic/settingslogic) ```config/basepack-settings.yml```\r\n* Created new models Import and Filter and database tables for them in migrations\r\n* Created localization file ```config/locales/basepack.en.yml```\r\n* Created new resources controller\r\n* Replaced ```application.html.erb``` \r\n* Created partials used in basepack's template\r\n* Added new [concern](http://guides.rubyonrails.org/routing.html#routing-concerns) to routes\r\n* Created initializers for rails_admin and dragonfly\r\n* Created new filters controller\r\n\r\n\r\nLast step in installation is to define inital ability in `app/models/ability.rb`. For now you can allow anybody to perform any action and then migrate database.\r\n> app/models/ability.rb:\r\n```ruby\r\ncan :manage, :all\r\n```\r\n\r\n```console\r\nrake db:migrate\r\n```\r\n\r\nEverything is set up and ready to be used. Our application will need to track projects, which will have a lot of issues (has_many). Use scaffolding to create these resources. Functionality of scaffolding has been modified by basepack.\r\n\r\n```console\r\nrails g scaffold Project name description:text start:date finish:date\r\nrails g scaffold Issue name description:text status:string resolution:string project:references user:references\r\n```\r\n\r\nThen migrate the database and run server.\r\n```console\r\nrake db:migrate\r\nrails s\r\n```\r\n<!-- TODO - screenshots of projects, issues (out of box) -->\r\nIn comparision with basic scaffolding it includes importing, exporting of resources, pagination through records, breadcrumb table columns are sortable. It supports searching and you can save filters (more about filters later).\r\n<!-- TODO routes -->\r\n\r\nAfter scaffolding your resources, you can customize fields used in individual actions by [Railsdmin DSL](https://github.com/sferik/rails_admin/wiki/Railsadmin-DSL).\r\n\r\n> app/models/project.rb:\r\n```ruby\r\nclass Project < ActiveRecord::Base\r\n  has_many :issues, inverse_of: :project\r\n\r\n  rails_admin do\r\n    list do\r\n      # only these fields(name, finish) will be displayed in this order\r\n      field :name\r\n      field :finish\r\n    end\r\n\r\n    edit do\r\n      field :name\r\n      # add rich text editor as a field type\r\n      field :description, :wysihtml5\r\n      field :start\r\n      field :finish\r\n     end \r\n\r\n     show do\r\n       field :name\r\n       field :description\r\n       field :start\r\n       field :finish\r\n     end \r\n  end \r\nend\r\n```\r\n\r\n\r\n> app/models/issue.rb:\r\n```ruby\r\nclass Issue < ActiveRecord::Base\r\n  belongs_to :project, inverse_of: :issues\r\nend\r\n```\r\n<!-- TODO say about association -->\r\n<!-- wysihtml5 -->\r\n\r\nIMPORTANT! Make sure that you define inverse_of option on has_one, has_many and belongs_to associations. It is necessary for correct functioning of **basepack**, see [Rails documentation](http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#label-Bi-directional+associations) for explaination.\r\n\r\nNotice that files for views are not generated (directories appp/views/projects and appp/views/issues are empty), but all RESTful(index, show, new, create, edit, update, destroy) actions are working correctly. It is because views iherit default look and you can easily override these defaults by creating appropriate files.\r\n\r\nAnother difference is controllers which inherit from ResourcesController. Full inheritance hierarchy looks this way:\r\n```ruby\r\nProjectsController < ResourcesController < Basepack::BaseController < InheritedResources::Base\r\n```\r\n\r\nIf you are not familiar with [InheritedResources](https://github.com/josevalim/inherited_resources), now is a time to take a look at [it](https://github.com/josevalim/inherited_resources).  \r\n\r\n[Basepack::BaseController](https://github.com/lksv/basepack/blob/master/app/controllers/basepack/base_controller.rb) adds to inherited resources:\r\n* defining strong parameters\r\n* ```options``` method\r\n* ```taggings``` method\r\n* ```build_resource``` method\r\n* ...\r\n\r\nIt will be disscussed later in tutorial except defining strong parameters. You just neeed to know that you don't have to define permitted parameters anymore. It is defined by RailsAdmin DSL, more precisely by what you set as visible in edit action. \r\n> app/models/project.rb:\r\n```ruby\r\nclass Project < ActiveRecord::Base\r\n  ...\r\n    edit do\r\n      field :name\r\n      field :description, :wysihtml5\r\n      field :start\r\n      field :finish\r\n     end \r\n  ...\r\nend\r\n```\r\n\r\nThis implicitly sets permitted params which could be written as follows:\r\n```ruby\r\ndef permitted_params\r\n  params.permit(:project => [:name, :description, :start, :finish])\r\nend\r\n```\r\nYou can override these implicit settings by creating this method in case you want it.\r\n\r\n## Nested Resource\r\nAs you can read in [RailsGuides](http://guides.rubyonrails.org/routing.html#nested-resources) nested resource is a way how to express parent-children relationship in routes.\r\nIn our application it make sense to nest issues to projects because they are logical children of projects.\r\n\r\n> config/routes.rb:\r\n```ruby \r\nresources :projects, concerns: :resourcable do\r\n  resources :issues, concerns: :resourcable\r\nend\r\n```\r\n\r\nYou can use [belongs_to](https://github.com/josevalim/inherited_resources#belongs-to) to reflect this relationship in controller. And it ensures that:\r\n* nested resource is really present in parent resource\r\n* you have permission to access not just nested resource, but parent resource as well\r\n\r\nFor example when an user enters url /projects/1/issues/2. In that case issue with id 2 must belong to project with id 1. \r\nAnd it checks user permissions for project with id 1 because it could be a security vulnerability if user could read issues on project he has no permitted access.\r\n\r\n\r\nOption [optional](https://github.com/josevalim/inherited_resources#optional-belongs-to) allows to display issues independantly of parent resource. \r\n\r\n> app/controllers/issues_controller.rb:\r\n```ruby\r\nclass IssuesController < ResourcesController\r\n  belongs_to :project, optional: true\r\nend\r\n```\r\n\r\nThere is one more thing related to nested resource. When you are creating new project you may also want to create new issues. You need to explicitly allow this with [accepts_nested_attributes_for](http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for) method.\r\n\r\n> app/models/project.rb:\r\n```ruby\r\nclass Project < ActiveRecord::Base\r\n  accepts_nested_attributes_for :issues\r\n  ...\r\n    edit do\r\n      field :name\r\n      field :description, :wysihtml5\r\n      field :start\r\n      field :finish\r\n      field :issues # display nested resource\r\n     end \r\n  ...\r\nend\r\n```\r\n\r\n<!-- TODO screenshot of add issue -->\r\n\r\n## Project show page\r\n\r\nSuppose I want to see on project show page all issues associated with that project. To do that you can customize default show page by creating appropriate view file. \r\n\r\nYou can use @project instance variable to output project's information or better render partials which will display project as it was defined in rails_admin's show block.\r\n> app/views/projects/show.html.erb:\r\n```rhtml\r\n<%= render 'header' %>\r\n<%= render 'show' %>\r\n```\r\n\r\n<!-- TODO - this is importnant how to emphasise this? -->\r\nUsually you want to display content the way it is defined in rails_admin [sections](https://github.com/sferik/rails_admin/wiki#sections) (e.g. show, list, edit, ...). There are defined helper methods for some of these sections\r\nwhich will use configuration from rails_admin block.\r\n\r\n```ruby\r\nedit_form_for(resource_or_chain, options = {})\r\nshow_form_for(resource_or_chain)\r\nlist_form_for(query_form)\r\nquery_form_for(class_or_chain, scope, options = {})\r\n...\r\n```\r\nThese methods returns content of section for specific resource let's call it instnce of form. Actually it is a instance of ```Basepack::Forms``` class. \r\nResource chain is a sequence (array) of resources in case of nested resources. You can see this sequence in a breadcrumb and you have also access to ```association_chain``` which is an empty array in project's show page. But if projects were nested resource for users e.g. url organization/3/users/2/projects/1 than ```association_chain``` would contain third organization object and second user.\r\n\r\nIn your views, you will get the following helpers:\r\n```ruby\r\nresource                       #=> @project\r\ncollection                     #=> @projects (with pagination)\r\ncollection_without_pagination  #=> @projects (without pagination)\r\nresource_class                 #=> Project\r\nassociation_chain              #=> array of resources\r\n```\r\nAs you might expect, collection, collection_without_pagination (@projects instance variable) is only available on index actions.\r\n\r\nThat means you can use ```show_form_for``` to get the same content as in show page of every issue in current project. For displaying you have to use ```form_render``` because ```render``` does not know how to render instances of basepack forms (in this case  ```Basepack::Forms::Show``` object). \r\n\r\n> app/views/projects/show.html.erb:\r\n```rhtml\r\n<%= render 'header' %>\r\n<%= render 'show' %>\r\n\r\n<h3>Issues</h3>\r\n<% resource.issues.each do |issue| %>\r\n  <%= form_render show_form_for(issue) %>\r\n<% end %>\r\n```\r\n\r\nFurthermore these helpers for retrieving content of forms have pair variant without ```_for``` at the end which already contains retrieved content in appropriate actions. For example in projects show page ```show_form``` is equivalent to show_form_for(resource).\r\n```ruby\r\nedit_form\r\nshow_form\r\nlist_form\r\nquery_for\r\n...\r\n```\r\n\r\n<!-- TODO small change to show_form to demonstrate customization -->\r\n\r\n\r\n<!-- This code can look little complicated so it does not matter if you do not understand we will talk more about it later.\r\nassociation_chain is in this case empty array because there is nothing before projects, take a look at breadcrump (projects), but we have for example users 1 project show than association_chain would contain users and it would be neccery for proper\r\ndisplaying of paths.\r\nWe want to display it in list_form which needs ```Basepack::Forms::Query``` object that's why we call query on it. \r\n \r\n -->\r\n\r\n## Default query\r\nImagine that there were many (hundred) projects especially these which already ended and every time you enter project index you see these passed projects and you have to search within them. It would be better to change default query which is currently just display all projects in order as they are in database (most of the time it is order in which they were created).\r\n\r\nAnd if you are familiar with [ransack](https://github.com/activerecord-hackery/ransack) it is really simple to change this default query. You just need to call method ```default_query``` in appropriate controller, which returns a hash of parameters for search. \r\nBasepack uses ransack under hood uses, but you have to use ```f``` as a default param key for search (instead of ```q```) and for searching use ```f[s]```.\r\n\r\n> app/controllers/projects_controller.rb:\r\n```\r\nclass ProjectsController < ResourcesController\r\n  default_query do\r\n    { # display projects which haven't ended yet (end today or later)\r\n      \"f[end_gteq_null]\" => Date.today,\r\n\r\n      # sorted by start of project \r\n      \"f[s]\" => 'start asc'\r\n    }\r\n  end\r\nend\r\n```\r\n\r\nIn case you have not worked with ransack you can watch [railscast episode](http://railscasts.com/episodes/370-ransack) by Ryan Bates for great introduction.\r\n\r\n## Tagged issues\r\nIn this chapter you will give user possibility to add tags to issues with [acts-as-taggable-on](https://github.com/mbleigh/acts-as-taggable-on) gem so first step is straightforward.\r\n\r\n> Gemfile:\r\n```ruby\r\ngem \"acts-as-taggable-on\"\r\n```\r\n\r\n<!-- \r\nIt does not make options request(issuescontroller#taggings) it handles all routes?\r\nWhere is partial from?\r\n  -->\r\n\r\nThen follow post installation [instructions](https://github.com/mbleigh/acts-as-taggable-on#post-installation) and create migration by generator and migrate the database: \r\n```console\r\nrails g acts_as_taggable_on:migration\r\nrake db:migrate\r\n```\r\n\r\nThe created model is located in different namespace which means basepack will not detect it automatically and you have to include it manually in the rails_admin configuration file.\r\n> config/initializers/rails_admin.rb:\r\n```ruby\r\nconfig.included_models = Basepack::Utils.detect_models + ['ActsAsTaggableOn::Tag']\r\n```\r\nMark issues model as taggabale with ```acts_as_taggable``` which will provide new methods for working with tags as specified in [usage section](https://github.com/mbleigh/acts-as-taggable-on#usage). \r\n\r\nEspecially interesting is method ```tag_list=``` for setting tags and ```tag_list``` for retrieving tags. It is enough just to display tag_list field and you are done.\r\nActually almost done because associations added by ```acts_as_taggable``` to make it work are also displayed as fields (Tags, Base list) so can exclude them at beginning.\r\n\r\n> app/models/issues.rb\r\n```ruby\r\nclass Issue < ActiveRecord::Base\r\n  ...\r\n  acts_as_taggable\r\n\r\n  rails_admin do\r\n    exclude_fields :base_tags, :tags\r\n\r\n    # display tags in show actions\r\n    show do\r\n      include_fields :tag_list\r\n    end\r\n\r\n    edit do\r\n      # tags entered in comma separated syntax\r\n      field :tag_list\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nTo make it even better render the tag_list field with basepack's [partial](https://github.com/lksv/basepack/blob/master/app/views/forms/edit/_tag_list_with_suggestions.html.haml?source=c) which uses select2 and provides autocompletion by making ajax calls to taggings method of particular controller (IssuesController in this case)\r\n\r\n> app/models/issues.rb\r\n```ruby \r\n  edit do\r\n    # tags entered in comma separated syntax\r\n    field :tag_list\r\n  end\r\n```\r\n\r\nIf you want you can enable actions (new, edit, show, ...) for ActsAsTaggableOn::Tag model just add routes for these actions.\r\n\r\n> routes.rb\r\n```ruby\r\n  resources :acts_as_taggable_on_tags, :filters, concerns: :resourcable\r\n```\r\n\r\nAnd create controller to properly handle all routes.\r\n> app/controllers/acts_as_taggable_on_tags_controller.rb\r\n```ruby\r\nclass ActsAsTaggableOnTagsController < ResourcesController\r\n  # set default model (Tag is in different namespace) see https://github.com/josevalim/inherited_resources#overwriting-defaults\r\n  defaults resource_class: ActsAsTaggableOn::Tag\r\nend\r\n```\r\n\r\n## Dynamicly showed and hidden attributes \r\n\r\nSometimes you need to hide or display field depending on the entered value of other field in new/edit form. \r\nWhen you take a look at this table you will see that it is exactly what you need right now. Because resolution can be added only to closed bugs (with resolved or verified status) as you can see in this table.\r\n\r\n<table >\r\n  <thead>\r\n    <tr>\r\n      <td>\r\n        <h4>Status</h4>\r\n      </td>\r\n\r\n      <td>\r\n        <h4>Resolution</h4>\r\n      </td>\r\n    </tr>\r\n  </thead>\r\n\r\n  <tbody>\r\n  <tr>\r\n    <td colspan=\"2\">Open bugs</td>\r\n  </tr>\r\n  <tr>\r\n    <td>\r\n      <dl>\r\n        <dd >Unconfirmed</dd>\r\n        <dd>New</dd>\r\n        <dd>Assigned</dd>\r\n        <dd>Reopened</dd>\r\n        <dd>Ready</dd>\r\n      </dl>\r\n    </td>\r\n\r\n    <td>\r\n      No resolution yet.\r\n    </td>\r\n  </tr>\r\n\r\n  <tr >\r\n    <td colspan=\"2\">Closed bugs</td>\r\n  </tr>\r\n\r\n  <tr>\r\n    <td>\r\n      <dl>\r\n        <dd >Resolved</dd>\r\n        <dd >Verified</dd>\r\n      </dl>\r\n    </td>\r\n\r\n    <td>\r\n      <dl>\r\n        <dd >Fixed</dd>\r\n        <dd >Invalid</dd>\r\n        <dd >Wontfix</dd>\r\n        <dd >Duplicate</dd>\r\n        <dd >Worksforme</dd>\r\n        <dd>Incomplete</dd>\r\n      </dl>\r\n    </td>\r\n  </tr>\r\n  </tbody>\r\n</table>\r\n\r\nFirst of all, you need to display status and resoultion field as a select box to limit possible values. You can use enum field type and than define model method with array of values which will be displayed as select box options. Check out rails_admin's [:enum field type](https://github.com/sferik/rails_admin/wiki/Enumeration) wiki page for more.\r\n\r\n> app/models/issues\r\n```ruby\r\nclass Issue < ActiveRecord::Base\r\n...\r\n  rails_admin do\r\n    # show ...\r\n    # list ...\r\n\r\n    edit do\r\n      field :name\r\n      field :description\r\n      field :project\r\n      # set type of status and resolution to enem\r\n      field :status, :enum\r\n      field :resolution, :enum\r\n    end\r\n  end\r\n  \r\n  # method for retrieving potencial values for status field\r\n  def status_enum\r\n    [\"Unconfirmed\", \"New\", \"Assigned\", \"Reopened\", \"Ready\", \"Resolved\", \"Verified\"]\r\n  end\r\n\r\n  # method for retrieving potencial values for resolution field\r\n  def resolution_enum\r\n    [\"Fixed\", \"Invalid\", \"Wontfix\", \"Worksforme\", \"Incomplete\"]\r\n  end\r\nend\r\n```\r\n\r\nAs table shows resolution needs to be displayed only when status is either \"Resolved\" or \"Verified\". In all other cases resolution should be hidden. Thanks to basepack you can easily do this.\r\n\r\n> app/models/issues.rb\r\n```ruby\r\n...\r\n  field :status, :enum do\r\n    html_attributes do\r\n    { \r\n      data: { \r\n        \"dynamic-fields\" => [\r\n          { condition: [\"Unconfirmed\", \"New\", \"Assigned\", \"Reopened\", \"Ready\"], field_actions: { resolution: { visible: false }} },\r\n          { condition: [\"Resolved\", \"Verified\"], field_actions: { resolution: { visible: true  }} },\r\n        ]   \r\n      }   \r\n    }   \r\n    end \r\n  end\r\n```\r\n\r\nLet's explain it step by step. You can add html attributes(like class, id, etc.) in configuration of any field through ```html_attributes```. Data hash is used for custom data attributes for many purposes like marking ajax requests or date picker in Rails. Basepack uses it too. In addition to dynamicly showed / hidden attributes for [dependant select boxes](https://github.com/lksv/basepack/wiki/Getting-started#dependant-select-boxes) and some field types like wysihtml5.\r\n\r\n```ruby\r\n  html_attributes do\r\n    { \r\n      class: \"my_css_class\",\r\n      data: { \r\n        # this will add data-name attribute to field \r\n        \"name\" => \"John\",\r\n        \r\n        # this will add data-city attribute to field \r\n        \"city\" => \"Brno\"\r\n      }  \r\n  end\r\n```\r\n\r\nThe only missing part is \"dynamic-fields\" attribute which will be processed by basepack. It contains list (array) of conditions and related actions (hash) when condition is met. Condition is true when given field (in this case status) is equal to any of the values specified in condition array.\r\n\r\n```ruby\r\n  \"dynamic-fields\" => [\r\n    {\r\n      # when this field has one of these values -> fieds_actions are executed \r\n      condition: [\"Unconfirmed\", \"New\", \"Assigned\", \"Reopened\", \"Ready\"],\r\n      # set visibility of resolution to false (= hide resolution field)\r\n      field_actions: { resolution: { visible: false } } \r\n    },\r\n    { \r\n      condition: [\"Resolved\", \"Verified\"], \r\n      field_actions: { resolution: { visible: true  }} \r\n    }\r\n  ]   \r\n```\r\n\r\n## Dependant select boxes\r\n\r\nFor better demonstration of depandant select boxes let's introduce small change to application and include versions of projects.\r\nProject can have many versions and issue will be tied to specific version of project.\r\n<!-- TODO which results in this database schema -->\r\nSo let's generate Version scaffold and add version_id to issues. Then migrate the database.\r\n```console\r\nrails g scaffold Version name project:belongs_to\r\nrails g migration addVersionIdToIssues version:belongs_to\r\nrake db:migrate\r\n```\r\n\r\nThen you need to add associations in appropriate models, do not forget inverse_of.\r\n```\r\nclass Issue < ActiveRecord::Base\r\n  belongs_to :project, inverse_of: :issues\r\n  belongs_to :version, inverse_of: :issues\r\n  ..\r\nend\r\n\r\nclass Project < ActiveRecord::Base\r\n  has_many :versions, inverse_of: :project\r\n  has_many :issues, inverse_of: :project\r\nend\r\n\r\nclass Version < ActiveRecord::Base\r\n  belongs_to :project, inverse_of: :versions\r\n  has_many :issues, inverse_of: :version\r\nend\r\n```\r\n\r\nThis leads us to our problem when you are creating or updating issue you now need to enter not just project but specific version of that project which is not working properly. Suppose you've 2 projects project A and project B. Project A has versions\r\n1.0 2.0 and project B has versions 1.0, 1.1 and 1.2, it allows you to enter incorrect for example version 1.1 and project A (version 1.1 doesn't belongs to project A). \r\nWhat you want to do is display only versions related to currently selected project. \r\n\r\nActually you might be wondering how is it even possible that options for associations are displayed in selectboxes at all.\r\nWhere are they from? These values are obtained by making ajax call to options method of particular controller of association.\r\nFor example values for project association are retrieved by options method call to ```ProjectsController```. Values for version's associations by ```VersionsController#options``` call. Basicaly controllers retrieve values of related model no matter whence they are called unless you specify otherwise. That can be done either by changing ```options_source``` in model to different url or by defining ```options``` method in controller. Here is the example of this method which demonstrates default behaviour (it's going to work the same way if you do not define this method). \r\n\r\n> app/controllers/versions_controller.rb\r\n```ruby\r\n  def options\r\n    authorize!(action_name.to_sym, resource_class) # CanCan\r\n    versions = Version.search(params[:f]).result\r\n    options!(collection: versions)\r\n  end\r\n```\r\n\r\nFirst line needs to be there to ensure authorization. Then it retrieves all ```Version``` records that match current search params and forward these records to parent action ```options!```. If you try manually append search params to options url ```/versions/options``` for example ```/versions/options?f[name_cont]=1.``` which will display versions with name containing substring '1.'.\r\n<!-- TODO mention format of options -->\r\n\r\nSo you already know that every time you click on select2 field it makes call to ```options``` method to display drop-down menu with options and it display all records as options unless you specify search parameters.\r\n\r\nYes, that's cool. But how to set these parameters in new or edit form with current values? The basepack once again make use of html attributes more precisely html data attributes. \r\n\r\n> app/models/issues.rb\r\n```ruby\r\n      field :version do\r\n        html_attributes do\r\n          { data: { \r\n              # set project's field as dependent select box\r\n              \"dependant-filteringselect\" => \"field=project_id\",\r\n\r\n              # post parameters\r\n              \"dependant-param\" => \"f[project_id_eq]\" \r\n            } \r\n          }\r\n        end\r\n      end\r\n```\r\n\r\nTo display only versions which belongs to currently selected project it marks projects field as \"dependant-filteringselect\". \r\nId of currently selected project (if there is any) is send as parameter(\"f[project_id_eq]\") to ```VersionsController#options```.Without defining \"dependant-param\" id of currently selected would be send in params[:undefined] which would be ignored by ```options``` method.\r\n\r\nYou do not have to use search params and write you options method the way you want but most of the time using search params and default ```options``` method will be sufficient.\r\n\r\n\r\n<!-- continue -->\r\n<!-- TODO identifying field -->\r\n\r\nIt works quite well except it displays all versions as options at beginning. To deal with this unique case you can set default options query send when form (new or edit) is rendered for the first time. It can be defined in ```options_source_params``` block. \r\nYou have to remember that you are working with both new and edit form. In new form it would be enough to set default query \"f[project_id_eq]\" to id of non-existing project which will not display any versions at the beginning. \r\n\r\n> app/models/issues.rb\r\n```ruby\r\n      field :version do\r\n        options_source_params do\r\n          { \"f[project_id_eq]\" => -1 }\r\n        end\r\n        html_attributes do\r\n          { data: { \r\n              # set project's field as dependent select box\r\n              \"dependant-filteringselect\" => \"field=project_id\",\r\n\r\n              # post parameters\r\n              \"dependant-param\" => \"f[project_id_eq]\" \r\n            } \r\n          }\r\n        end\r\n      end\r\n```\r\n\r\nBut if you want to change version in edit form of existing issue that has project already set it would display no versions as well. Unless you select a project which override default id -1. So if the issue(```bindings[:object]```) has project set use that ```project_id``` as a default query otherwise use -1.\r\n\r\n> app/models/issues.rb\r\n```ruby\r\n  options_source_params do\r\n    { \"f[project_id_eq]\" => bindings[:object].try(:project_id) || -1 }\r\n  end\r\n```","google":"UA-46491076-1","note":"Don't delete this file! It's used internally to help with page regeneration."}